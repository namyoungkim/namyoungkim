---
layout: post
title:  "SQL-기본 문법 ①"
date:   2017-08-09 15:10:23 +0700
categories: [sql]
---
# SQL 기본 문법 정리

---
## 1. SQL이란?
- SQL(Structured Query Language) : 관계형 데이터베이스 관리시스템의 표준 언어

---
## 2. 데이터 조작문
### 2.1. 기본 조작

| SQL문 |  | 설 명 |
| :--- | :--- | :--- |
| SELECT |  | 검색하고자 하는 테이블의 필드명 |
| FROM |  | 검색하고자 하는 테이블명 |
| WHERE |  | 검색할 데이터의 검색 조건 |
| GROUP BY |  | 그룹화(분할)하고자 하는 필드명 |
| HAVING |  | GROUP BY에 명시된 그룹에 대한 검색 조건 |
| ORDER BY |  | 정렬하고자 하는 기준 필드명 |
| DISTINCT |  | 중복 제거 |

{% highlight sql %}
SELECT [DISTINCT] 필드명
FROM 테이블명
WHERE 조건
GROUP BY 필드명
HAVING 조건
ORDER BY 필드명 ASC|DESC
LIMIT 100
;
{% endhighlight %}
#### Query문을 작성할 때, Query 명령어는 대문자로, 테이블과 필드명은 소문자로 적어 구별을 둔다.
* GROUP BY : 필드를 그룹화하여 그 그룹에 따라 결과를 보고 싶을 때 사용
* ASC : 오름차순
* DESC : 내림차순

---
### 2.2. 조건 검색
{% highlight sql %}
WHERE 필드명 is not NULL
# 필드가 NULL값이 아닌 것을 가져와라.

WHERE 필드명 is not NULL
# 필드가 NULL값인 것을 가져와라.
{% endhighlight %}

{% highlight sql %}
CASE
    WHEN country = 'KR' THEN 'KR'
    WHEN country = 'US' THEN 'US'
    WHEN country = 'TW' THEN 'TW'
    WHEN country = 'JP' THEN 'JP'
    ELSE 'ETC'
    END
{% endhighlight %}
- 국가를 4개국으로 나누고, 나머지 국가를 기타국가로 Lableing

{% highlight sql %}
WHERE name LIKE '김%'
# 성이 '김'인 사람을 찾아와라.

WHERE email LIKE '%hotmail%'
# hotmail을 메일로 쓰는 사람을 찾아라.

WHERE id IN (1031, 2042, 5233)
# id = 1031, 2042, 5233 인 사람을 찾아라.

WHERE job IN ('회사원', '공무원')
# 직업이 회사원, 공무원인 사람을 찾아라.
{% endhighlight %}

{% highlight sql %}
SELECT id, COUNT(*) AS freq
FROM sales
WHERE YEAR(sday) = 2001
AND MONTH(sday) = 4
GROUP BY id
HAVING COUNT(*) >=20
;
{% endhighlight%}
- 2001년 4월에 판매 실적이 20개 이상인 id를 뽑아라.

{% highlight sql %}
SELECT TOP n (PERCENT)(WITH TIES)
FROM 테이블
WHERE 조건
;
{% endhighlight%}
* TOP 다음 n : 0이상의 정수 사용
* 비율로 sample을 보고 싶을 땐, PERCENT 옵션 사용
* 동점자가 있을 수 있으며 이를 보고 싶을 때 WITH TIES 옵션 사용

---
### 2.3. 둘 이상의 테이블을 다룰 때
#### JOIN
- JOIN 문 일반적인 형식
{% highlight sql %}
SELECT 필드명
FROM 테이블
(join_type) JOIN 테이블
ON 조건(WHERE 조건)
(ORDER BY 필드 리스트 ASC|DESC)
;
{% endhighlight%}

#### INNER JOIN
{% highlight sql %}
SELECT C.id, name, lid, email
FROM customer_info AS C
INNER JOIN customer_Onlineinfo AS CO
ON C.id = CO.id
ORDER BY C.id
;
{% endhighlight%}
* 테이블을 연결하는 필드의 값이 같은 레코드를 선택
* 테이블.필드명으로 쓸 수 있음. ex) C.id
* ON 절 : FROM 절의 테이블의 키가 왼쪽 = INNER JOIN 절의 테이블 키가 오른쪽
    * 원래 테이블에 붙일 테이블을 연결

{% highlight sql %}
SELECT C.id, name, lid, email
FROM customer_info AS C
INNER JOIN customer_Onlineinfo AS CO
ON C.id = CO.id
WHERE YEAR(C.bday) >= 1980
AND C.email is not NULL
ORDER BY C.id
;
{% endhighlight%}
- 1980년 이후 출생자의 아이디, 이름, 로그인 아이디, 이메일을 가져와라
- 단, 이메일 주소가 NULL값이면 제외해라.

{% highlight sql %}
SELECT s.id, name, subject_name, score
FROM student AS s
INNER JOIN score AS sc
ON s.id = sc.id
INNER JOIN curriculum AS c
ON sc.subjectid = c.subjectid
ORDER BY s.id
;
{% endhighlight%}
* 쿼리문을 작성하면서 만들어진 테이블을 같이 생각해보고 거기에 추가로 쿼리문을 작성
* 3개의 JOIN은 먼저 2개를 조인한 후 하나를 더 조인한다고 생각하면 된다.
    * 2개의 테이블을 학생 아이디로 합쳤고, 그 후 합쳐진 테이블의 과목 아이디와 합칠 테이블의 과목 아이디를 조인

#### OUTER JOIN
{% highlight sql %}
SELECT c.id, name, lid, email
FROM customer_info AS c
LEFT JOIN customer_onlineinfo AS co
ON c.id = co.cid
;
{% endhighlight %}

{% highlight sql %}
SELECT c.id, name, lid, email
FROM customer_onlineinfo AS co
RIGHT JOIN customer_info AS c
ON co.id = c.cid
;
{% endhighlight %}
- LEFT / RIGHT JOIN 기준이되는 테이블도 위치가 바뀐다.

#### UNION
{% highlight sql %}
SELECT id, subjectid, score
FROM score

UNION

SELECT id, subjectid, score
FROM grad_score
;

==============================

SELECT id, subjectid, score
FROM score

UNION ALL

SELECT id, subjectid, score
FROM grad_score
;
{% endhighlight %}
- 두 테이블의 필드명이 같을 때, 합집합의 개념인 UNION을 사용할 수 있다.
- 둘 이상의 테이블을 연결하여 검색할 수 있는 방법
- `UNION vs UNION ALL`
    + `UNION`
        * 두 테이블의 중복되지 않은 값을 반환한다.
        * 중복을 제거하기 위해 Sorting을 함.
        * 자료가 많거나, INDEX가 되어있지 않은 컬럼을 대상으로 하면 쿼리시간이 길어질 수 있음.
    + `UNION ALL`
        * 두 테이블의 중복되는 값까지 반환함.

#### 중첩 Query
{% highlight sql %}
SELECT cid, name
FROM customer_info
WHERE cid IN 
    (
    SELECT cid
    FROM customer_onlineinfo
    WHERE email is NULL
    )
;
{% endhighlight %}
- customer_info 테이블에 있는 고객들 중 email 주소를 갖고 있는 온라인 고객을 검색해라.

{% highlight sql %}
SELECT id, name
FROM student AS s
WHERE NOT EXISTS
    (
    SELECT *
    FROM score AS sc
    WHERE s.id = sc.id
    )
;
{% endhighlight %}
- student 테이블에는 있지만 score 테이블에 존재하지 않는 학생의 명단을 검색해라.

{% highlight sql %}
SELECT cid, name
FROM customer_info AS c
WHERE EXISTS
    (
    SELECT *
    FROM customer_onlineinfo AS co
    WHERE c.cid = co.cid
    )
AND EXISTS
    (
    SELECT *
    FROM customer_score AS sc
    WHERE c.cid = sc.cid
    )
;
{% endhighlight %}
- customer_onlineinfo 테이블에도 존재하고, customer_score 테이블에도 존재하는 고객
- (즉 온라인 고객이면서 구매 실적이 있는 고객)의 명단을 검색해라.

---
#### 지금까지 SQL 기본 문법 정리를 해보았다. ②편에서는 함수와 날짜함수에 대해 정리할 예정이다.
