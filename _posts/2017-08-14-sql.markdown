---
layout: post
title:  "SQL-쿼리문을 보면서 이해하기 ②"
date:   2017-08-14 23:45:23 +0700
categories: [SQL, DB]
---

#### 두 테이블 조인 후 한 테이블의 모든 컬럼명 불러올 때
{% highlight sql %}
SELECT
    a.*,
    b.name
FROM
    DB_name.user_info AS a,
    DB_name.user_purchase AS b
WHERE a.user_id = b.user_id
;
{% endhighlight %}
- `a.*`처럼 `*`를 사용하면 된다.

---

#### Query를 보면서 이해하자.
{% highlight sql %}
SELECT
    DATE(a.date_first) AS the_date,
    COUNT(DISTINCT(a.user_id))
FROM
    DB_name.login_info AS a,
    (
        SELECT DISTINCT(user_id)
        FROM DB_name.login_info
        WHERE DATE(date_first) = '2017-05-31'
    ) AS b
WHERE a.user_id = b.user_id
AND
    DATE(a.date_first) IN 
        (
            '2017-05-31',
            date_add('2017-05-31', interval +1 day),
            date_add('2017-05-31', interval +3 day),
            date_add('2017-05-31', interval +7 day),
            date_add('2017-05-31', interval +15 day)
        )
GROUP BY DATE(a.date_first)
;
{% endhighlight %}
- `2017-05-31`에 처음 유입된 유저의 처음 모수 집계
- `date_add()`를 사용하여 경과일 별 `Retention`을 구할 수 있다.

---

{% highlight sql %}
SELECT *
FROM DB_name.user_wealth
WHERE date_id = 201708
AND E_mileage != 0
;
{% endhighlight %}
- 마일리지가 `0`이 아닌 컬럼을 긁어와라.

---

{% highlight sql %}
SELECT
    user_id,
    SUM(price) AS total_sales
FROM DB_name.user_purchase
GROUP BY user_id
ORDER BY total_sales desc
;


SELECT
    DATE_FORMAT(date_first, '%Y-%m') AS the_month,
    COUNT(DISTINCT(user_id)) AS PU
FROM DB_name.user_purchase
GROUP BY the_month
;
{% endhighlight %}
- 첫 번째 쿼리는 유저들의 총 과금액을 구하며, 과금액을 내림차순으로 뽑은 것
- 두 번째 쿼리는 과금한 시점을 과금한 월로 바꾸어 준 뒤, 월 별 PU를 집계

---

{% highlight sql %}
SELECT
    DATE(a.date_first) AS the_date,
    COUNT(DISTINCT(a.user_id))
FROM
    DB_name.login_info AS a,
    (
        SELECT DISTINCT(user_id)
        FROM DB_name.user_info
        WHERE DATE(date_first) = '2011-03-14'
    ) as b
WHERE a.user_id = b.user_id
AND DATE(a.date_first) >= '2011-03-14'
AND DATE(a.date_first) <= date_add('2011-03-14', interval +15 day)
GROUP BY the_date
;


SELECT
    DATE(k.date_first) AS the_date,
    COUNT(DISTINCT(k.user_id))
FROM
    DB_name.login_info AS k,
    (
        SELECT DISTINCT(a.user_id)
        FROM
            DB_name.login_info AS a,
            (
                SELECT DISTINCT(user_id)
                FROM DB_name.user_info
                WHERE DATE(date_first) = '2011-03-14'    ### 가입일
            ) AS b
        WHERE a.user_id = b.user_id
        AND date(a.date_first) = '2011-03-15'
    ) AS x    ### D +1
WHERE k.user_id = x.user_id
AND DATE(k.date_first) >= '2011-03-16'
AND DATE(k.date_first) <= date_add('2011-03-16', interval +14 day)
GROUP BY the_date
;


SELECT
    COUNT(DISTINCT(a.user_id)) AS PU,
    SUM(a.price) AS Sales
FROM DB_name.user_purchase AS a
WHERE a.user_id IN (
                    SELECT user_id
                    FROM DB_name.user_info
                    WHERE DATE(date_first) = '2011-03-14'
                    )
AND DATE(a.date_first) >= '2011-03-14'
AND DATE(a.date_first) < date_add('2011-03-14', interval +15 day)
;
{% endhighlight %}
- `D+` Retention
    - `2011-03-14`에 가입한 유저를 유니크하게 뽑음
    - `date_add()`를 사용하여 `D+0 ~ D+15`까지 집계
- `D++` Retention
    - `2011-03-14`에 가입한 유저를 유니크하게 뽑음
    - `2011-03-15`에도 접속한 유저 → 모수 (D+1)
    - `date_add()`를 사용하여 `D++1 ~ D++15`까지 집계
- `2011-03-14`에 가입한 유저의 15일 간 누적 PU와 누적 과금액을 산출

---

{% highlight sql %}
SELECT
    user_id,
    MAX(date_first)
FROM DB_name.login_info
GROUP BY user_id
;

SELECT
    user_id,
    COUNT(the_date),
    SUM(cnt),
    SUM(price),
    MAX(the_date) - MIN(the_date)
FROM DB_name.user_purchase
GROUP BY user_id
;
{% endhighlight %}
- `MAX()` 사용하면 가장 최근에 접속한 일자를 출력
- 과금 테이블을 유저로 그룹 바이한 후
    - 과금한 일자 집계
    - 과금 횟수 합산
    - 과금액 합산
    - 마지막 과금한 일자 - 최초 과금한 일자

---

{% highlight sql %}
SELECT *
FROM DB_name.user_purchase
WHERE DATE(date_first) >= '2013-03-25'
AND DATE(date_first) <= '2013-04-08'
UNION ALL
SELECT *
FROM DB_name.user_purchase
WHERE DATE(date_first) >= '2013-04-24'
AND DATE(date_first) <= '2013-05-08'
UNION ALL
SELECT *
FROM DB_name.user_purchase
WHERE DATE(date_first) >= '2013-05-25'
AND DATE(date_first) <= '2013-06-08'
UNION ALL
SELECT *
FROM DB_name.user_purchase
WHERE DATE(date_first) >= '2013-06-24'
AND date(date_first) <= '2013-07-06'
;
{% endhighlight %}
- 같은 테이블에서 날짜만 다르게 뽑을 때, `UNION ALL`을 쓰는 방법도 있다.

---