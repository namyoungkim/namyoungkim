---
layout: post
title:  "Python Test"
date:   2017-08-22 13:20:23 +0700
categories: [python]
---

02. 파이썬 변수와 문자열 (revision)
===================================

1) 파이썬으로 하는 계산
--


```python
601000 * 10
```




    6010000




```python
601000 * 0.97
```




    582970.0




```python
601000 - 587000
```




    14000




```python
180 * 10 + 10000
```




    11800



* 사칙연산의 순서를 기억하지 못한다면 괄호를 사용하여 연산자의 우선순위를 명시


```python
(180 * 10) + 10000
```




    11800



2) 변수
--

* 변수란?
    * 어떤 값을 저장하는 공간을 의미
    * 프로그래밍을 할 때, 어떤 값을 기억하는 것이 아니라 어떤 이름을 통해 해당값을 가리키게 해두고 싶을 때 사용


```python
naver = 601000
```

#### 위 코드의 의미
* 'naver라는 변수가 601000이라는 값을 가리키게 하라'는 것
* 산수에서는 등호 표시(=)가 '같음'을 뜻함.
* 파이썬에서는 바인딩(binding)을 의미
![Alt text](a.png)
* 위의 예에서 601000이라는 값 역시 메모리의 어딘가에 위치하는데, 그 위치를 naver라는 변수가 가리키고 있음.

* 어떤 데이터가 있을 때 그 데이터가 메모리 상에 위치하는 주소를 변수라는 곳에 저장함
* 나중에 변수에 저장된 메모리 상의 주소에 가서 실제 값을 읽음


```python
naver * 10
```




    6010000



#### 변수 naming의 중요함
* 변수란 어떤 값을 대신 기억하기 위해 값에 이름표를 붙여둔 것과 비슷
* 변수의 첫 글자는 영어 또는 언더스코어(_)로 시작
* 변수명을 숫자로 시작하면 아래와 같이 오류 발생


```python
1naver = 1123
```


      File "<ipython-input-9-c98dd4d003a6>", line 1
        1naver = 1123
             ^
    SyntaxError: invalid syntax



* 한글로도 변수명 만들기 가능(다만 비추천)
* 영어소문자와 언더바를 조합해서 만드는 것이 좋다.


```python
네이버 = 601000
```


```python
네이버
```




    601000




```python
naver_juga = 601000
```


```python
naver_juga
```




    601000



① 파이썬 변수와 객체
--

* 예제
    * 화요일의 '시작가'가 월요일의 종가와 같다고 가정
    * 월요일 종가 = 10,000 – (10,000 * 0.3) = 7,000
    * 화요일 종가 = 7,000 – (7,000 * 0.3) = 4,900


```python
monday_end_price = 10000 - (10000 * 0.3)
tuesday_end_price = monday_end_price - (monday_end_price * 0.3)
tuesday_end_price
```




    4900.0




```python
x = 100
```

* 먼저 '100'이라는 값이 메모리의 어딘가에 할당되는데, 파이썬에서는 이를 객체(object)라고 부릅니다.
* 변수 'x' 역시 메모리의 어딘가에 할당되는 공간인데, 그 공간에는 '100'이라는 객체의 메모리 주소값이 저장되어 있습니다.
    * 이를 다르게 표현하자면 변수 x는 100이라는 값의 객체를 가리키고 있는 것입니다.
* 변수와 객체의 관계를 일상생활과 연관 지어 설명해보면 여러분이 살고 계시는 집이 바로 객체입니다. 실제로 존재하는 것이죠.
* 이와 달리 주소 자체는 집은 아니지만 다른 누군가가 여러분 집의 주소를 통해 여러분이 실제로 사는 집에 갈 수 있습니다.
* 파이썬도 마찬가지입니다. 변수를 통해 실제 객체에 접근할 수 있는 것입니다.
![Alt text](b.png)
* 위 코드에서 변수 'x'와 객체 '100'은 위 그림과 같은 관계를 맺습니다. 객체는 네모 박스로 표시했고 변수는 동그라미로 표시했습니다.
* 변수는 "집 주소"로 생각하면 되고, 객체는 실제 여러분이 살고 있는 집으로 생각하면 좀 더 쉽게 이해할 수 있습니다.

#### 그렇다면 파이썬에서 메모리에 할당된 객체의 주소(정확히 말하면 주소는 아니지만 의미상으로는 주소로 생각해도 됩니다)는 어떻게 확인할 수 있을까요?
* 다음과 같이 id()라는 함수를 사용하면 됩니다.


```python
id(x)
```




    4297151696




```python
y = 100
```


```python
x, y
```




    (100, 100)




```python
id(x), id(y)
```




    (4297151696, 4297151696)



* 위 id(변수)값은 같다. 항상 같을까?

### 변수와 객체(object)의 바인딩 방법
1. 메모리에 조금 전의 100과 다른 위치에 100을 할당하고, 그 주소값을 y가 가리킨다(메모리에 두 개의 '100'이 존재).
2. 메모리가 아까우니 조금 전의 100의 주소를 y가 가리키게 한다(메모리에 100은 실제로 하나만 존재).

위 코드의 실행 결과를 보면 id 값이 같습니다.
#### 즉, 두 변수가 서로 같은 객체를 가리키고 있음을 확인할 수 있습니다.
이를 그림으로 나타내면 아래와 같습니다. 파이썬은 위 코드에 대해 2번과 같은 방식으로 동작했던 것입니다.
![Alt text](c.png)

#### 단, 파이썬이 항상 2번 방식으로 동작하는 것은 아닙니다. 다음 코드를 실행시켜보면 id 값이 서로 다르게 나오는 것을 확인할 수 있습니다.


```python
x = 10000
y = 10000
```


```python
id(x), id(y)
```




    (4371780144, 4371780304)



위 코드에서 변수와 객체의 관계를 그림으로 나타내면 아래와 같습니다. 변수 x와 변수 y는 서로 다른 객체를 가리키고 있습니다.
![alt text](d.png)

#### 메모리를 효과적으로 사용하기 위해서 이렇게 작동!
참고로 파이썬이 이렇게 동작하는 이유는 프로그램을 작성할 때 사용하는 정수값(Integer) 중 자주 사용할 것 같은 범위의 정수값은 메모리에 한 번만 올려두고 이를 여러 변수가 가리키게 함으로써 메모리를 효과적으로 사용하기 위해서입니다.
#### 0 ~ 256까지는 id 값이 같지만 257부터는 서로 다른 객체가 생성되는 것을 확인할 수 있다.

3) 파이썬 문자열
--

* 2절에서 변수를 이용해 메모리에 할당된 어떤 정수값을 가리키는 것(바인딩)을 배웠습니다.
#### 이번 절에서는 변수로 문자열을 가리키는 것에 대해 알아보도록 하겠습니다.
* C/C++과 같은 프로그래밍 언어에서는 'a', 'b', 'c'와 같은 알파벳 글자 하나를 '문자'라고 부르며, 'house'와 같이 두 개 이상의 문자로 구성된 것을 '문자열(String)'이라고 합니다.
#### 다른 프로그래밍 언어와 달리 파이썬은 문자와 문자열을 구분하지 않고 작은따옴표('')나 큰따옴표("")로 묶임 문자의 모음을 문자열이라고 부릅니다.
* 예를 들어, 다음의 세 개의 구문은 모두 변수가 파이썬 문자열을 바인딩하는 예 입니다.
    * 앞서 설명한 것처럼 파이썬은 문자와 문자열을 구분하지 않고 모두 문자열로 취급합니다.
    * 이때 한 가지 주의해야 할 점은 작은따옴표로 문자열을 시작한 경우는 반드시 작은따옴표로 끝나야 하고, 큰따옴표로 시작한 경우 반드시 큰따옴표로 끝나야 한다는 것입니다.
    #### 즉, 문자열의 시작과 끝에 서로 다른 종류의 따옴표를 사용할 수 없습니다.


```python
mystring  = 'hello world'
mystring1 = 'a'
mystring2 = "a"
mystring3 = "abc mart"
```


```python
mystring
```




    'hello world'




```python
mystring1
```




    'a'




```python
mystring2
```




    'a'




```python
mystring3
```




    'abc mart'




```python
print(mystring)
```

    hello world


① 문자열 인덱싱 및 슬라이싱
--


```python
mystring
```




    'hello world'




```python
len(mystring)
```




    11



* '11'이라는 값이 반환되는데 이는 'hello world'라는 문자열이 총 11개의 글자로 구성되어 있다는 의미입니다.
* 참고로 len() 함수는 length의 줄임말입니다. 그런데 왜 10자가 아니라 11자일까요?
    * 그것은 'hello'와 'world'라는 단어 사이에 있는 공백도 하나의 문자로 간주하기 때문입니다.

* 'hello world'라는 문자열 중에서 'hello'라는 글자만 구하고 싶다면 어떻게 하면 될까요?


```python
mystring[0:5]
```




    'hello'



* 파이썬에서는 '슬라이싱'이라는 기능을 제공하는데 위와 같이 가져오고 싶은 문자열의 범위를 지정하면 됩니다.
    * 참고로 slice → '자르다', '일부', '한 조각'
#### 프로그래밍 언어에서는 우리의 일상생활과 달리 범위가 1부터 시작하는 것이 아니라 0부터 시작합니다.
* 그래서 위의 시작 값이 1이 아니라 0으로 되어있는 것입니다. 아래 그림은 'hello world'라는 문자열의 각 글자 사이에 인덱스를 붙여본 것입니다.
![alt text](e.png)
#### 글자 사이에 인덱스가 붙으므로 슬라이싱할 때, 마지막 숫자를 안 읽는 것이다!!

이번에는 mystring이라는 변수를 통해 'world'만 가져오려면 어떻게 해야 할까요?


```python
mystring[6:11]
```




    'world'



#### 글자가 길어지면 맨 마지막 글자의 위치를 세기가 참으로 귀찮다!!
- 다행히! 파이썬의 슬라이싱에서는 시작값 또는 끝값을 생략하면 알아서 해당 문자열의 시작과 끝을 의미합니다.
- 다음과 같이 작성할 수 있습니다.


```python
mystring[6:]
```




    'world'




```python
mystring[:5]
```




    'hello'



#### 파이썬의 문자열 인덱싱에서 인덱스 값으로 음수도 사용할 수도 있습니다.
* 인덱스 값이 음수인 경우에는 문자열의 뒤쪽부터 역순으로 글자를 셉니다.
![alt text](f.png)


```python
mystring[-5:11]
```




    'world'



#### len()을 사용하여 슬라이싱을 사용해보고, 양수, 음수는 편한 것을 사용

② 문자열 자르기
--


```python
my_jusik = "naver daum"
```

#### split method
* 문자열 슬라이싱으로도 문자열을 분리할 수 있지만 파이썬에서는 문자열을 쉽게 분리하기 위해 split이라는 메서드를 지원


```python
my_jusik
```




    'naver daum'




```python
my_jusik.split(' ')
```




    ['naver', 'daum']



- 파이썬에서 문자열을 분리하고 싶을 때는 위 코드와 같이 split 메서드를 사용하면 됩니다.
- 이때 메서드의 인자(argument)로 어떤 문자를 기준으로 문자열을 나눌지 알려줘야 합니다.
- 'naver'와 'daum'이라는 문자열 사이에는 공백(blank)이 존재하므로 공백을 기준으로 문자열을 나눠주면 됩니다.
- 이를 위해 split(' ')와 같이 작은따옴표 사이에 공백을 하나 넣어줬습니다.

#### 그러나 위 코드에서 반환값을 보면 여전히 우리가 원하는 값은 아닙니다. 반환값을 보면 'naver'와 'daum'이라는 두 개의 문자열이 list로 둘러싸여 있음을 확인할 수 있습니다.

- 이번 장에서는 리스트 내의 값에 접근할 때 [0], [1], [2]와 같이 인덱스 값을 주면 된다는 것만 기억하면 됩니다.
- 리스트의 인덱싱 기능을 이용하여 다음과 같이 코드를 수정해 보겠습니다.
- split(' ')의 반환값이 리스트이므로 [0]을 사용해서 리스트의 첫 번째 값을 가져왔습니다.




```python
my_jusik.split(' ')[0]
```




    'naver'




```python
print(my_jusik.split(' ')[0])
```

    naver


### 정리
1. 문자열 자를 때 split 메소드를 사용
    - 기준 설정(위에선 공백)
2. list로 잘라지므로, 인덱스값을 줘서 다시 슬라이싱

③ 문자열 합치기
--


```python
daum = "Daum"
kakao = "KAKAO"
```


```python
daum + kakao
```




    'DaumKAKAO'




```python
daum + ' ' + kakao
```




    'Daum KAKAO'




```python
daum_kakao = daum + ' ' + kakao
```


```python
daum_kakao
```




    'Daum KAKAO'



4) 파이썬 기본 데이터 타입
--

- 객체에 대한 데이터 타입을 확인하려면 type()이라는 내장 함수를 사용하면 됩니다.


```python
type(70000)
```




    int




```python
type(3.1415)
```




    float




```python
type('python')
```




    str



연습 문제
--

문제 2-1)
- 다음(Daum)의 주가가 89,000원이고 네이버(Naver)의 주가가 751,000이라고 가정하고, 어떤 사람이 다음 주식 100주와 네이버 주식 20주를 가지고 있을 때, 그 사람이 가지고 있는 주식의 총액을 계산하는 프로그램을 작성하세요.


```python
daum = 89000
naver = 751000
total = daum * 100 + naver *20
total
```




    23920000



문제 2-2)
- 문제 2-1)에서 구한 주식 총액에서 다음과 네이버의 주가가 각각 5%, 10% 하락한 경우에 손실액을 구하는 프로그램을 작성하세요.


```python
loss = daum*100*0.05 + naver*20*0.1
loss
```




    1947000.0



문제 2-3)
- 우리나라는 섭씨 온도를 사용하는 반면 미국와 유럽은 화씨 온도를 주로 사용합니다. 화씨 온도(F)를 섭씨 온도(C)로 변환할 때는 다음과 같은 공식을 사용합니다.
- 이 공식을 사용해 화씨 온도가 50일 때의 섭씨 온도를 계산해 보세요.
    - C = (F-32)/1.8


```python
f = 50
c = (f-32)/1.8
c
```




    10.0



문제 2-4)
- 화면에 "pizza"를 10번 출력하는 프로그램을 작성하세요.


```python
print('pizza\n'*10)
```

    pizza
    pizza
    pizza
    pizza
    pizza
    pizza
    pizza
    pizza
    pizza
    pizza
    


#### print문
- 문자열 * 숫자 → 숫자만큼 출력해라(옆으로)
- '\n' 하면 줄바꿈

문제 2-5)
- 월요일에 네이버의 주가가 100만 원으로 시작해 3일 연속으로 하한가(-30%)를 기록했을 때 수요일의 종가를 계산해 보세요.


```python
monday_start = 1000000
monday_end = monday_start*0.7
tuesday_start = monday_end
tuesday_end = tuesday_start*0.7
wednesday_start = tuesday_end
wednesday_end = wednesday_start*0.7
wednesday_end
```




    342999.99999999994



문제 2-6)
- 다음 형식과 같이 이름, 생년월일, 주민등록번호를 출력하는 프로그램을 작성해 보세요.
    - 이름: 파이썬 생년월일: 2014년 12월 12일 주민등록번호: 20141212-1623210


```python
print('이름: 파이썬 생년월일: 2014년 12월 12일 주민등록번호: 20141212-1623210')
```

    이름: 파이썬 생년월일: 2014년 12월 12일 주민등록번호: 20141212-1623210


문제 2-7)
- s라는 변수에 'Daum KaKao'라는 문자열이 바인딩돼 있다고 했을 때 문자열의 슬라이싱 기능과 연결하기를 이용해 s의 값을 'KaKao Daum'으로 변경해 보세요.


```python
s = 'Daum KaKao'
s[5:] +' ' + s[:4]
```




    'KaKao Daum'



- split method를 사용하여 풀어보자


```python
s.split(' ')
s.split(' ')[1]+' '+s.split(' ')[0]
```




    'KaKao Daum'



문제 2-8)
- a라는 변수에 'hello world'라는 문자열이 바인딩돼 있다고 했을 때 a의 값을 슬라이싱을 활용하여 'hi world'로 변경해 보세요.


```python
a = 'hello world'
b = 'hi ' + a[6:]
b
```




    'hi world'



문제 2-9)
- x라는 변수에 'abcdef'라는 문자열이 바인딩돼 있다고 했을 때 x의 값을 'bcdefa'로 변경해 보세요.


```python
x = 'abcdef'
y = x[1:] + x[0]
y
```




    'bcdefa'


